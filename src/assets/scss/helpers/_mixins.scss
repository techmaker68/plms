/* placeholder */
@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

$breakpoints: (
  "xtrasmallmobile": (
    max-width: 480px,
  ),
  "smallmobile": (
    max-width: 576px,
  ),
  "mobile": (
    max-width: 767px,
  ),
  "iPad": (
    max-width: 991px,
  ),
);

@mixin breakpoint($name) {
  @if map-has-key($breakpoints, $name) {
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  } @else {
    @warn "Couldn't find a breakpoint named `#{$name}`.";
  }
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Transition
@mixin transition($what: all, $time: 0.5s, $how: ease-in-out) {
  transition: $what $time $how;
}

// rgba Border
@mixin border-rgba($color, $opacity) {
  border: 1px solid rgba(red($color), green($color), blue($color), $opacity);
}

// Background Color rgba
@mixin background-color-rgba($color, $opacity) {
  background-color: rgba($color, $opacity);
}

// Color rgba
@mixin color-rgba($color, $opacity) {
  color: rgba($color, $opacity);
}

// Horizontal and Center Align using Transform
@mixin horizontal-center-transform {
  position: absolute;
  inset-inline-start: 50%;
  transform: translateX(-50%);
}

@mixin vertical-center-transform {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@mixin horizontal-vertical-center-transform {
  position: absolute;
  inset-block-start: 50%;
  inset-inline-start: 50%;
  transform: translate(-50%, -50%);
}

// Center Block
@mixin center-block {
  display: block;
  margin-inline-start: auto;
  margin-inline-end: auto;
}

@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin flex-wrap {
  display: flex;
  flex-wrap: wrap;
}

@mixin calendar-spans-generator() {
  $fromValue: 1;
  $toValue: 8;
  @for $i from $fromValue to $toValue {
    &.span#{$i} {
      width: calc(((#{$i} * 100%) / 7) - 1rem);
    }
  }
}
